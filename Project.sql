SHOW DATABASES;


-- CREATE DATABASE FOR USING QUERY

CREATE DATABASE PROJECT;
USE PROJECT; 


   
-- DESCRIBE THE TABLE 
DESC CAR_INSURANCE;

--  ADDING AND DROP THE COLUMN 
ALTER TABLE INSURANCE ADD COLUMN OUTCOME INT;

ALTER TABLE INSURANCE DROP COLUMN OUTCOME;

-- BY USING MODIFY THE COLUMN VARIABLE

ALTER TABLE INSURANCE MODIFY GENDER VARCHAR(25);

-- BY USING THE RENAME TABLE  

RENAME TABLE INSURANCE TO CAR_INSURANCE;

DESC CAR_INSURANCE;

--  BY USING ADDING PRIMARY KEY AFTER TABLE CREATION 
ALTER TABLE CAR_INSURANCE ADD PRIMARY KEY(ID);
DESC CAR_INSURANCE;
-- AFTER TABLE CREATION I ADD PRIMARY KEY IN ID COLUMN 

-- DROP CONSTRINTS
ALTER TABLE CAR_INSURANCE DROP PRIMARY KEY;
/* AFTER USING DROP STATEMENT DROP PRIMARY KEY IN ID COLUMN */

-- ADDING DEFAULT CONSTRAINTS
update car_insurance set education='graduate';

-- UPDATE VALUES
UPDATE CAR_INSURANCE SET INCOME ='POVERTY' WHERE ID = 186;
/* FOR USING UPDATE SYNTAX I UPDATE IN INCOME COLUMN ID NUMBER 186 UPDATE THE VALUES */

-- DELETE 
DELETE FROM CAR_INSURANCE WHERE ID = 381;
/* FOR USING DELETE SYNTAX I USE DELETE SOME SPECIFIC ROWS/RECORD */

--  SHOW THE SOME SPECIFIC COLUMN 
SELECT POSTAL_CODE FROM CAR_INSURANCE;

-- ALIASES QUERY IS USE FOR TEMPRORY NAME CHANGE 
SELECT DRIVING_EXPERIENCE AS EXPERIENCE FROM CAR_INSURANCE;
/* USING FOR THIS SYNTAX FOR TEMPRORY NAME CHANGE OLD COLUMN NAME TO NEW COLUMN NAME IN TABLE */

-- USING  WHERE FIND DATA
SELECT CREDIT_SCORE,VEHICLE_YEAR FROM CAR_INSURANCE WHERE VEHICLE_YEAR = 'BEFORE 2015';
/* THIS SYNTAX IS USED TO FIND THE DATA IN ANY COLUMN OF THE TABLE */

-- DISTINCT 
SELECT DISTINCT ID FROM CAR_INSURANCE;
/* IT IS USED FOR REMOVE DUPLICATE VALUES FROM THE DATA */

-- BETWEEN
SELECT * FROM CAR_INSURANCE WHERE ANNUAL_MILEAGE BETWEEN 8000 AND 10000;
/* USING SYNTAX FOR SELECT VALUES WITHIN A GIVEN RANGE IN BETWEEN CAMMAND */


-- CONCATE
SELECT CONCAT(VEHICLE_YEAR,VEHICLE_TYPE)AS VEHICLE_DATA FROM CAR_INSURANCE;
/* IT IS USE FOR COMBINE TWO COLUMN IN ONE COLUMN */
SELECT CONCAT(VEHICLE_YEAR,'   ',VEHICLE_TYPE)AS VEHICLE_DATA FROM CAR_INSURANCE;
/* IT IS USE FOR BLANK SPACE REMAINS BETWEEN TWO COLUMN COMBINE */
SELECT CONCAT(VEHICLE_YEAR,'_____',VEHICLE_TYPE)AS VEHICLE_DATA FROM CAR_INSURANCE;
/* IT IS USE FOR UNDERSCORE REMAINS BETWEEN TWO COLUMN COMBINE */

-- CHAR LENGTH
SELECT INCOME, char_length(INCOME) AS LENGTH FROM CAR_INSURANCE;
/*FOR USING SYNTAX IN COLUMN TO MEASURE THE LENGTH OF A CHARACTER */


-- CONVERTING INTO UPPER & LOWER CASE
SELECT UPPER(EDUCATION) AS EDUCATION FROM CAR_INSURANCE;
/*  USING UPPER FUNCTION AND SET SPECIFIC COLUMN IN THE COLUMN ALL CHARACTERS UPPER FROM THATS MEAN CAPITAL LETTERS */
SELECT LOWER(GENDER) AS GENDER FROM CAR_INSURANCE;
/*  USING LOWER FUNCTION AND SET SPECIFIC COLUMN IN THE COLUMN ALL CHARACTERS LOWER FROM THATS MEAN SMALL LETTERS */

-- COUNT
SELECT COUNT(DISTINCT(VEHICLE_YEAR)) AS TOTAL_INSURANCE FROM CAR_INSURANCE;
/* IT IS USE TO COUNT TOTAL NUMBER OF RECORD FROM SPECIFIC COLUMN */
 
 
 
--  LIKE OPERATOR
SELECT ID,AGE,GENDER,RACE,INCOME FROM CAR_INSURANCE WHERE INCOME LIKE'M%';
/*  IF WE KNOW FIRST WORDS AND THEN USE LIKE 'WORDS%' (M%) TO FIND INCOME NAME STARTING FROM M WORDS  */

SELECT ID,AGE,GENDER,RACE,INCOME FROM CAR_INSURANCE WHERE RACE LIKE'%TY';
/*  IF WE KNOW LAST TWO WORDS AND THEN USE LIKE '%WORDS' (%TY) TO FIND RACE NAME LAST TWO FROM TY WORDS  */

SELECT ID,AGE,GENDER,RACE,INCOME FROM CAR_INSURANCE WHERE INCOME LIKE 'PO%TY';
/*  IF WE KNOE FIRST WORD AND LAST WORD BUT DONT KNOW MIDDLE WORD THEN USE LIKE 'PO%TY' */

SELECT ID,AGE,GENDER,RACE,INCOME FROM CAR_INSURANCE WHERE GENDER LIKE '__MA%';
/*  IF WE KNOW ONLY MIDDLE WORDS BUT DONT KNOW FIRST AND LAST WORD THEN USE LIKE '__MA%'  */

SELECT * FROM CAR_INSURANCE WHERE INCOME LIKE 'W%';
/*  IF WE KNOW  FIRST CHARACTER THEN USE LIKE 'WORD%'('W%') TO FIND INCOME NAME STARTING FROM W WORDS  */




SELECT * FROM CAR_INSURANCE WHERE ID LIKE 775;
/*  IT IS USED FOR IN ALL TABLE SHOW THE ID NUMBER 775  */

-- ORDER BY
SELECT ID,AGE,GENDER,RACE,EDUCATION,INCOME FROM CAR_INSURANCE ORDER BY INCOME DESC;
/* IN ORDER BY OPERATOR USING DESC THE DATA IS SHOW IN DESCENDING ORDER  */

SELECT ID,AGE,GENDER,RACE,EDUCATION,INCOME FROM CAR_INSURANCE ORDER BY EDUCATION  ASC;
/* IN ORDER BY OPERATOR USING ASC THE DATA IS SHOW IN ASCENDING ORDER  */

SELECT * FROM CAR_INSURANCE ORDER BY AGE DESC LIMIT 65;
/* IN ORDER BY OPERATOR USING DESC THE DATA IS SHOW IN DESCENDING ORDER AND LIMIT IS USE SET SHOW RECORD NO.  */


-- MAX COUNT
SELECT  DISTINCT AGE, MAX(AGE) FROM CAR_INSURANCE;
/* THE MAX FUNCTION RETURN THE MAXIMUM VALUE IN SET OF COLUMN */

-- MIN COUNT
SELECT  DISTINCT ID, MIN(ID) FROM CAR_INSURANCE;
/* THE MIN FUNCTION RETURN THE MINIMUN VALUE OR LOWEST VALUE IN A COLUMN  */

-- WHEN STATEMENTS
SELECT EDUCATION, CASE EDUCATION
WHEN 'HIGH SCHOOL' THEN 'COMPLETE PAYMENT' WHEN 'UNIVERSITY' THEN 'HIGH FEES' ELSE 'MIDDLE CLASS' END AS 'REMARK' FROM CAR_INSURANCE;
/* THE SQL CASE EXPRESSION  GOES THROUGH CONDITIONS AND RETURNS A VALUE WHEN THE FIRST CONDITION IS MET.
SO, ONCE A CONDITION IS TRUE, IT WILL RETURN THE RESULT. IF NO CONDITION ARE TRUE, IT RETURN THE VALUE IN THE ELSE CLAUSE  */


-- TIME AND DATE
SELECT CURTIME();
/* IT IS USED FOR SHOW THE CURRENT TIME */

SELECT CURDATE();
/* IT IS USED FOR SHOW THE CURRENT DATE */

SELECT NOW();
/* IT IS USED FOR SHOW THE CURRENT TIME AND DATE  */

-- GREATER AND SMALLER VALUES
SELECT GREATEST(1,10,115,158,586,845,1000);
/* IT IS USED FOR SHOW THE GREATER VALUE  */

SELECT LEAST(10,258,2549,5000,85964);
/*  IT IS USED FOR SHOW THE LOWEEST VALUE  */

-- CHECk CONDITION
SELECT IF (5 < 2,'TRUE','FALSE');
/* THE IF CONDITION RETURN A VALUE TRUE AND ANOTHER VALUE IF CONDITION IS FALSE  */

-- FIND AVERAGE
SELECT AVG(VEHICLE_OWNERSHIP) FROM CAR_INSURANCE;
/* AVG() FUNCTION RETURNS THE AVERAGE VALUE OF AN EXPRESSION  */

  -- GROUP BY 
 SELECT  COUNT(ID),AGE FROM CAR_INSURANCE GROUP BY (ID);
 /*  IT IS USED FOR COLLECT DATA FROM MULTIPLE RECORDS AND GROUP THE RESULT BY ONE OR MORE COLUMN  */
 
  SELECT COUNT(ID),AGE FROM CAR_INSURANCE GROUP BY AGE ORDER BY COUNT(AGE) DESC;
  /*  USING GROUP BY AND ORDER BY DATA IS GROUP AND SET DESC ORDER */
  
  -- GROUP BY COUNT WITH HAVING
SELECT ID,AGE,GENDER, COUNT(AGE) FROM CAR_INSURANCE GROUP BY AGE HAVING AGE > 40;
/* THE GROUP BY WITH HAVING CLAUSE RETRIVES THE RESULT FOR A SPECIFIC GROUP OF A COLUMN THE MATCHES CONDITION SPECIFIED IN THE HAVING CLAUSE.  */

-- USE OF SUBQUERYS ARE NESTED QUERY
SELECT COUNT(ID) ,RACE FROM CAR_INSURANCE WHERE RACE = (SELECT MAX(RACE) FROM CAR_INSURANCE);
/*  IT IS USED FOR RETRIVES COMPLEX INFORMATION.THE INNER QUERY IS FIRST EXECUTED AND AFTER THAT OUTER QUERY IS EXECUTED.  */

-- SECOND HIGHEST VALUE
SELECT ID,MAX(AGE) FROM CAR_INSURANCE WHERE ID != (SELECT MAX(AGE) FROM CAR_INSURANCE);
/* IT IS USED FOR AGE COLUMN SHOW THE SECOND HIGHEST VALUE  */

-- THIRD HIGHEST VALUE
SELECT DISTINCT ID FROM CAR_INSURANCE ORDER BY ID DESC LIMIT 3;
/* IT IS USED FOR DESC ORDER BY SHOW THE VALUES  */

-- JOINS IS USE CONNECT TWO OR MORE TABLES
SELECT  A. RACE , B.VEHICLE_TYPE FROM car_insurance AS A INNER JOIN car_insurance AS B ON A.RACE = B.VEHICLE_TYPE;
/*  JOINS 
    THERE ARE FIVE TYPES ARE JOINS:-
    1. CROSS JOIN
    2. INNER JOIN
    3. LEFT JOIN
    4. RIGHT JOIN
    5. SELF JOIN
*/


-- STORED PROCEDURE
CALL GET_DATA;
 /* 
 A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again. So if you have an SQL query that you write over
 and over again, save it as a stored procedure, and then just call it to execute it.
( I STORE  SELECT * FROM CAR_INSUREANCE THIS QUERY  THEN STORE QUERY NAME IS GET_DATA SO RUN THIS QUERY I ENTRE CALL GET_DATA THEN SHOW DATA)
 */







 